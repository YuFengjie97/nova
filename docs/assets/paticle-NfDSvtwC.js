var a=Object.defineProperty;var l=(h,s,t)=>s in h?a(h,s,{enumerable:!0,configurable:!0,writable:!0,value:t}):h[s]=t;var i=(h,s,t)=>(l(h,typeof s!="symbol"?s+"":s,t),t);import{a as e}from"./p5.min-cP_G9PFk.js";import{g as d}from"./color-7Ub9jxIQ.js";class r{constructor(s){i(this,"$p");i(this,"pos",new e.Vector(0,0));i(this,"rangeWidth",100);i(this,"rangeHeight",100);i(this,"vel",new e.Vector(0,0));i(this,"acc",new e.Vector(0,0));i(this,"maxSpeed",4);i(this,"r",1);i(this,"color","red");i(this,"h",0);this.$p=s.$p,this.rangeWidth=s.rangeWidth,this.rangeHeight=s.rangeHeight,this.pos=s.position,s.r&&(this.r=s.r),s.color&&(this.color=s.color)}draw(s=!0){s?(this.$p.stroke(this.h,255,255,30),this.h=this.h+1,this.h>255&&(this.h=0)):this.$p.stroke(this.color),this.$p.strokeWeight(this.r),this.$p.circle(this.pos.x,this.pos.y,this.r*2)}update(){this.vel.add(this.acc),this.vel.limit(this.maxSpeed),this.pos.add(this.vel),this.acc.mult(0)}applyForce(s){this.acc.add(s)}}class n extends r{constructor(t){super(t);i(this,"prevPos",new e.Vector(0,0));this.prevPos=this.pos.copy()}draw(t=!0){t?(this.$p.stroke(this.h,255,255,30),this.h=this.h+1,this.h>255&&(this.h=0)):this.$p.stroke(this.color),this.$p.strokeWeight(this.r),this.$p.line(this.pos.x,this.pos.y,this.prevPos.x,this.prevPos.y)}update(){this.edges(),this.updatePrev(),super.update()}updatePrev(){this.prevPos.x=this.pos.x,this.prevPos.y=this.pos.y}edges(){this.pos.x>this.rangeWidth&&(this.pos.x=0,this.updatePrev()),this.pos.x<0&&(this.pos.x=this.rangeWidth,this.updatePrev()),this.pos.y>this.rangeHeight&&(this.pos.y=0,this.updatePrev()),this.pos.y<0&&(this.pos.y=this.rangeHeight,this.updatePrev())}}class v extends r{constructor(s,t){super(s),this.vel=t}draw(s=!0){s?(this.$p.fill(this.h,255,255,30),this.h=this.h+1,this.h>255&&(this.h=0)):this.$p.fill(this.color),this.$p.noStroke(),this.$p.circle(this.pos.x,this.pos.y,this.r*2)}updateColor(){this.color=d()}update(){this.pos.add(this.vel),this.edge()}edge(){const{pos:{x:s,y:t},rangeHeight:o,rangeWidth:p}=this;(s<=0||s>=p)&&(this.updateColor(),this.vel.mult([-1,1])),(t<=0||t>=o)&&(this.updateColor(),this.vel.mult([1,-1]))}}export{n as P,v as a};
