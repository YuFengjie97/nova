var E=Object.defineProperty;var I=(o,s,a)=>s in o?E(o,s,{enumerable:!0,configurable:!0,writable:!0,value:a}):o[s]=a;var r=(o,s,a)=>(I(o,typeof s!="symbol"?s+"":s,a),a);import{d as q,r as D,h as G,E as O,C as Q,o as Z,b as H,O as J,T as K,aP as V,N as X,Q as A,U as Y}from"./index-CpijY5gs.js";import{c as $}from"./chroma-ZZZ4fKfI.js";import{i as tt}from"./initThree-7ahq76Y7.js";import{p as et}from"./dotTexture-NXlc0I5v.js";import"./OrbitControls-DbIETR5g.js";import"./initStats-k2kTMle0.js";function st(o){return new Worker("/nova/assets/particleLife-CIoNnqtk.js",{name:o==null?void 0:o.name})}const l=8,u=50,ut=q({__name:"particleLife",setup(o){const s=new st,{PI:a,min:C,atan:v}=Math,g=D(),x=l*u,B=$.scale(["#00b894","#0984e3","#6c5ce7","#fdcb6e","#e84393"]);return G(async()=>{const{width:d,height:c}=g.value.getBoundingClientRect(),{scene:M,camera:p,renderWrap:F}=tt(g.value,!0,!1,!1),f=d,w=c,P=8,N=.8,U=C(d,c),m=P*2,_=U/10,z=.5;M.background=new O(0);const k=800;p.position.set(f/2,w/2,k),p.aspect=d/c,p.fov=v(c/2/k)*2/a*180,p.lookAt(f/2,w/2,0),p.updateProjectionMatrix();class W{constructor(e,n){r(this,"positions");r(this,"colors");r(this,"types");r(this,"geo",new J);r(this,"mat",new K({size:P,map:new V().load(et),blending:X,transparent:!1,sizeAttenuation:!0,vertexColors:!0}));r(this,"mesh");this.positions=new Float32Array(l*u*3),this.types=new Float32Array(l*u);for(let t=0;t<e.length;t++)this.positions[t]=e[t];for(let t=0;t<n.length;t++)this.types[t]=n[t];this.positions=e,this.types=n,this.colors=new Float32Array(x*3),this.geo.setAttribute("position",new A(this.positions,3)),this.geo.setAttribute("color",new A(this.colors,3));for(let t=0;t<l;t++)for(let h=0;h<u;h++){const b=t*u+h,[S,T,j]=B(t/l).gl();this.colors[b*3]=S,this.colors[b*3+1]=T,this.colors[b*3+2]=j}this.mesh=new Y(this.geo,this.mat),this.mesh.geometry.attributes.position.needsUpdate=!0,M.add(this.mesh)}accelatorForce(e,n){return e<=m?e/m-1:e<_?(e-m)/(_-m)*n:0}getPos(e){return[this.positions[3*e],this.positions[3*e+1],this.positions[3*e+2]]}update(){s.postMessage({tag:"update_cloud"})}draw(){this.mesh.geometry.attributes.position.needsUpdate=!0,this.mesh.geometry.attributes.color.needsUpdate=!0}}async function L(){return new Promise(i=>{s.postMessage({tag:"init_settings",data:{typeNum:l,typeParticleNum:u,width:d,height:c,xRange:f,yRange:w,frictionFactor:N,distMin:m,distMax:_,forceFactor:z}}),s.onmessage=e=>{e.data.tag==="init_settings_done"&&(console.log("init_settings_done"),i(1))}})}await L();async function R(){return s.postMessage({tag:"init_cloud"}),new Promise(i=>{s.onmessage=e=>{if(e.data.tag==="init_cloud_done"){const{positions:n,types:t}=e.data.data,h=new W(n,t);console.log("init_cloud_done"),i(h)}}})}const y=await R();s.onmessage=i=>{const{data:e}=i.data;if(i.data.tag==="update_cloud_done"){const{positions:n}=e;for(let t=0;t<n.length;t++)y.positions[t]=n[t]}},F(()=>{y.update(),y.draw()})()}),Q(()=>{s.postMessage("close"),s.terminate()}),(d,c)=>(Z(),H("div",{ref_key:"con",ref:g,class:"w-full h-full"},null,512))}});export{ut as default};
