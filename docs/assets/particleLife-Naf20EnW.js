var w=Object.defineProperty;var A=(a,r,l)=>r in a?w(a,r,{enumerable:!0,configurable:!0,writable:!0,value:l}):a[r]=l;var p=(a,r,l)=>(A(a,typeof r!="symbol"?r+"":r,l),l);(function(){"use strict";const{random:a,PI:r,sin:l,cos:x,sqrt:M,min:F}=Math,s={typeNum:0,typeParticleNum:0,width:0,height:0,xRange:0,yRange:0,frictionFactor:0,distMin:0,distMax:0,forceFactor:0};class P{constructor(){p(this,"particleNum",0);p(this,"positions");p(this,"vels");p(this,"types");p(this,"AGrid",[]);const{typeNum:t,typeParticleNum:e,width:c,height:i}=s;this.particleNum=t*e,this.positions=new Float32Array(t*e*3),this.vels=new Float32Array(t*e*3),this.types=new Float32Array(t*e);for(let o=0;o<t;o++)for(let h=0;h<e;h++){const n=o*e+h;this.types[n]=o;const{xRange:f,yRange:g}=s;this.positions[n*3]=a()*f/2-f/4+c/2,this.positions[n*3+1]=a()*g/2-g/4+i/2,this.positions[n*3+2]=0,this.vels[n*3]=0,this.vels[n*3+1]=0,this.vels[n*3+2]=0}for(let o=0;o<t;o++){const h=[];for(let n=0;n<t;n++)h.push(a()*2-1);this.AGrid.push(h)}}accelatorForce(t,e){return t<=s.distMin?t/s.distMin-1:t<s.distMax?(t-s.distMin)/(s.distMax-s.distMin)*e:0}getPos(t){return[this.positions[3*t],this.positions[3*t+1],this.positions[3*t+2]]}getVel(t){return[this.vels[3*t],this.vels[3*t+1],this.vels[3*t+2]]}edge(t){const[e,c]=this.getPos(t);if(e<0||e>s.xRange||c<0||c>s.yRange){const i=a()*2*r,o=a()*F(s.xRange,s.yRange)/2;return this.positions[t*3]=x(i)*o+s.xRange/2,this.positions[t*3+1]=l(i)*o+s.yRange/2,this.vels[t*3]=0,this.vels[t*3+1]=0,!0}return!1}updatePos(t,e,c){this.vels[t*3]+=e,this.vels[t*3+1]+=c,this.vels[t*3]*=s.frictionFactor,this.vels[t*3+1]*=s.frictionFactor;const[i,o]=this.getVel(t);this.positions[t*3]+=i,this.positions[t*3+1]+=o}update(){for(let t=0;t<this.particleNum;t++){let e=0,c=0;for(let i=0;i<this.particleNum;i++){if(this.edge(t)||this.edge(i)||t===i)continue;const[o,h]=this.getPos(t),[n,f]=this.getPos(i),g=n-o,v=f-h,u=M(g**2+v**2),R=this.types[t],_=this.types[i],N=this.AGrid[R][_],m=this.accelatorForce(u,N)*s.forceFactor;e+=u===0?-.1*s.forceFactor:g/u*m,c+=u===0?-.1*s.forceFactor:v/u*m}this.updatePos(t,e,c)}}}let d;addEventListener("message",y=>{const{tag:t,data:e}=y.data;if(t==="close"&&(close(),postMessage({tag:"close_done"})),t==="init_settings"){for(const c in e){const i=c;s[i]=e[i]}postMessage({tag:"init_settings_done"})}t==="init_cloud"&&(d=new P,postMessage({tag:"init_cloud_done",data:{positions:d.positions,types:d.types}})),t==="update_cloud"&&(d.update(),postMessage({tag:"update_cloud_done",data:{positions:d.positions}}))},!1)})();
