import{d as S,r as T,j as D,aX as X,I as Z,C as E,e as G,U as $,Z as q,T as H,aM as J,X as A,$ as K,o as O}from"./index-CqfaNC88.js";import{c as Q}from"./index-T8xJO8QF.js";import{p as V}from"./dotTexture-NXlc0I5v.js";function Y(p){return new Worker("/nova/assets/particleLife-Db_iU8BI.js",{name:p==null?void 0:p.name})}const i=8,r=50,ot=S({__name:"particleLife",setup(p){const o=new Y,{PI:P,min:k,atan:v}=Math,h=T(),x=i*r,B=Q.scale(["#00b894","#0984e3","#6c5ce7","#fdcb6e","#e84393"]);return D(async()=>{const{width:c,height:a}=h.value.getBoundingClientRect(),{scene:y,camera:l,renderWrap:C}=X(h.value,!0,!1,!1),g=c,m=a,b=8,F=.8,U=k(c,a),u=b*2,f=U/10,z=.5;y.background=new Z(0);const M=800;l.position.set(g/2,m/2,M),l.aspect=c/a,l.fov=v(a/2/M)*2/P*180,l.lookAt(g/2,m/2,0),l.updateProjectionMatrix();class W{constructor(e,s){this.geo=new $,this.mat=new q({size:b,map:new J().load(V),blending:H,transparent:!1,sizeAttenuation:!0,vertexColors:!0}),this.positions=new Float32Array(i*r*3),this.types=new Float32Array(i*r);for(let t=0;t<e.length;t++)this.positions[t]=e[t];for(let t=0;t<s.length;t++)this.types[t]=s[t];this.positions=e,this.types=s,this.colors=new Float32Array(x*3),this.geo.setAttribute("position",new A(this.positions,3)),this.geo.setAttribute("color",new A(this.colors,3));for(let t=0;t<i;t++)for(let d=0;d<r;d++){const w=t*r+d,[L,N,R]=B(t/i).gl();this.colors[w*3]=L,this.colors[w*3+1]=N,this.colors[w*3+2]=R}this.mesh=new K(this.geo,this.mat),this.mesh.geometry.attributes.position.needsUpdate=!0,y.add(this.mesh)}accelatorForce(e,s){return e<=u?e/u-1:e<f?(e-u)/(f-u)*s:0}getPos(e){return[this.positions[3*e],this.positions[3*e+1],this.positions[3*e+2]]}update(){o.postMessage({tag:"update_cloud"})}draw(){this.mesh.geometry.attributes.position.needsUpdate=!0,this.mesh.geometry.attributes.color.needsUpdate=!0}}async function j(){return new Promise(n=>{o.postMessage({tag:"init_settings",data:{typeNum:i,typeParticleNum:r,width:c,height:a,xRange:g,yRange:m,frictionFactor:F,distMin:u,distMax:f,forceFactor:z}}),o.onmessage=e=>{e.data.tag==="init_settings_done"&&(console.log("init_settings_done"),n(1))}})}await j();async function I(){return o.postMessage({tag:"init_cloud"}),new Promise(n=>{o.onmessage=e=>{if(e.data.tag==="init_cloud_done"){const{positions:s,types:t}=e.data.data,d=new W(s,t);console.log("init_cloud_done"),n(d)}}})}const _=await I();o.onmessage=n=>{const{data:e}=n.data;if(n.data.tag==="update_cloud_done"){const{positions:s}=e;for(let t=0;t<s.length;t++)_.positions[t]=s[t]}},C(()=>{_.update(),_.draw()})()}),E(()=>{o.postMessage("close"),o.terminate()}),(c,a)=>(O(),G("div",{ref_key:"con",ref:h,class:"w-full h-full"},null,512))}});export{ot as default};
