var I=Object.defineProperty;var T=(o,s,a)=>s in o?I(o,s,{enumerable:!0,configurable:!0,writable:!0,value:a}):o[s]=a;var r=(o,s,a)=>(T(o,typeof s!="symbol"?s+"":s,a),a);import{d as Z,r as q,j as D,N as E,G as V,e as $,$ as H,a2 as J,aV as K,Z as O,a0 as P,a3 as Q,o as X}from"./index-Dk52mj26.js";import{c as Y}from"./chroma-D8b-vtvi.js";import{i as tt}from"./initThree-CPuUtzyO.js";import{p as et}from"./dotTexture-NXlc0I5v.js";import"./OrbitControls-Rz_z-Chd.js";import"./initStats-z-qGLZo8.js";function st(o){return new Worker("/nova/assets/particleLife-CIoNnqtk.js",{name:o==null?void 0:o.name})}const l=8,u=50,ut=Z({__name:"particleLife",setup(o){const s=new st,{PI:a,min:v,atan:x}=Math,g=q(),C=l*u,B=Y.scale(["#00b894","#0984e3","#6c5ce7","#fdcb6e","#e84393"]);return D(async()=>{const{width:d,height:c}=g.value.getBoundingClientRect(),{scene:M,camera:p,renderWrap:F}=tt(g.value,!0,!1,!1),f=d,w=c,k=8,N=.8,z=v(d,c),m=k*2,_=z/10,U=.5;M.background=new E(0);const A=800;p.position.set(f/2,w/2,A),p.aspect=d/c,p.fov=x(c/2/A)*2/a*180,p.lookAt(f/2,w/2,0),p.updateProjectionMatrix();class W{constructor(e,n){r(this,"positions");r(this,"colors");r(this,"types");r(this,"geo",new H);r(this,"mat",new J({size:k,map:new K().load(et),blending:O,transparent:!1,sizeAttenuation:!0,vertexColors:!0}));r(this,"mesh");this.positions=new Float32Array(l*u*3),this.types=new Float32Array(l*u);for(let t=0;t<e.length;t++)this.positions[t]=e[t];for(let t=0;t<n.length;t++)this.types[t]=n[t];this.positions=e,this.types=n,this.colors=new Float32Array(C*3),this.geo.setAttribute("position",new P(this.positions,3)),this.geo.setAttribute("color",new P(this.colors,3));for(let t=0;t<l;t++)for(let h=0;h<u;h++){const b=t*u+h,[R,S,G]=B(t/l).gl();this.colors[b*3]=R,this.colors[b*3+1]=S,this.colors[b*3+2]=G}this.mesh=new Q(this.geo,this.mat),this.mesh.geometry.attributes.position.needsUpdate=!0,M.add(this.mesh)}accelatorForce(e,n){return e<=m?e/m-1:e<_?(e-m)/(_-m)*n:0}getPos(e){return[this.positions[3*e],this.positions[3*e+1],this.positions[3*e+2]]}update(){s.postMessage({tag:"update_cloud"})}draw(){this.mesh.geometry.attributes.position.needsUpdate=!0,this.mesh.geometry.attributes.color.needsUpdate=!0}}async function j(){return new Promise(i=>{s.postMessage({tag:"init_settings",data:{typeNum:l,typeParticleNum:u,width:d,height:c,xRange:f,yRange:w,frictionFactor:N,distMin:m,distMax:_,forceFactor:U}}),s.onmessage=e=>{e.data.tag==="init_settings_done"&&(console.log("init_settings_done"),i(1))}})}await j();async function L(){return s.postMessage({tag:"init_cloud"}),new Promise(i=>{s.onmessage=e=>{if(e.data.tag==="init_cloud_done"){const{positions:n,types:t}=e.data.data,h=new W(n,t);console.log("init_cloud_done"),i(h)}}})}const y=await L();s.onmessage=i=>{const{data:e}=i.data;if(i.data.tag==="update_cloud_done"){const{positions:n}=e;for(let t=0;t<n.length;t++)y.positions[t]=n[t]}},F(()=>{y.update(),y.draw()})()}),V(()=>{s.postMessage("close"),s.terminate()}),(d,c)=>(X(),$("div",{ref_key:"con",ref:g,class:"w-full h-full"},null,512))}});export{ut as default};
